#include "../include/GLProgram.h"
#include <string>

#define WINDOW_WIDTH 1600
#define WINDOW_HEIGHT 1200

// declare static members for use in callback functions
int GLProgram::windowWidth = WINDOW_WIDTH;
int GLProgram::windowHeight = WINDOW_HEIGHT;
Camera GLProgram::camera;
bool GLProgram::mousePressed = false;
double GLProgram::prevMouseX, GLProgram::prevMouseY;
glm::mat4 GLProgram::modelMatrix = glm::mat4(1.0f);

int main() {
    GLProgram program;
    tinynurbs::RationalCurve<float> contour;
    contour.control_points = { glm::fvec3(0,-0.5,0.5), glm::fvec3(0,-0.5,1), glm::fvec3(0,1,1), glm::fvec3(0,1,0.7), glm::fvec3(0,0,0.5),
    glm::fvec3(0,1,0.3), glm::fvec3(0,1,0), glm::fvec3(0,-0.5,0), glm::fvec3(0,-0.5,0.5) };
    contour.knots = { 0,0,0,0.15,0.3,0.4,0.6,0.7,0.85,1,1,1 };
    contour.degree = 2;
    contour.weights = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };

    tinynurbs::RationalCurve<float> trace;
    trace.control_points = { glm::fvec3(0,0,0), glm::fvec3(1,0.5,0.5), glm::fvec3(2,1,0),
        glm::fvec3(3,0.5,-0.5), glm::fvec3(4,0,0), glm::fvec3(5,-1,1) };
    trace.knots = { 0, 0, 0, 0, 0.33, 0.66, 1, 1, 1, 1 };
    trace.degree = 3;
    trace.weights = { 0.9, 0.8, 0.7, 0.6, 0.5, 0.5 };

    std::vector<tinynurbs::RationalCurve<float>> profile_curves = {
        tinynurbs::RationalCurve<float>(2, {0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
             {glm::fvec3(0,-0.5,0.5), glm::fvec3(0,-0.5,1), glm::fvec3(0,1,1), glm::fvec3(0,1,0.7),
             glm::fvec3(0,0,0.5), glm::fvec3(0,1,0.3), glm::fvec3(0,1,0), glm::fvec3(0,-0.5,0), 
             glm::fvec3(0,-0.5,0.5) },
            { 1, 1, 1, 1, 1, 1, 1, 1, 1 }),
        tinynurbs::RationalCurve<float>(2, {0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
            {glm::fvec3(1.30384, 0.123077, 0.776065),glm::fvec3(1.50584, 0.346404, 1.17522),glm::fvec3(1.51224, 1.65404, 0.440344),glm::fvec3(1.39104, 1.52005, 0.200854),glm::fvec3(1.30597, 0.558957, 0.531108),glm::fvec3(1.22944, 1.34139, -0.118466),glm::fvec3(1.10824, 1.20739, -0.357956),glm::fvec3(1.10184, -0.100251, 0.376915),glm::fvec3(1.30384, 0.123077, 0.776065),},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, }),
        tinynurbs::RationalCurve<float>(2, {0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
            {glm::fvec3(2.11214, 0.300734, 0.445626),glm::fvec3(2.27571, 0.737865, 0.266298),glm::fvec3(2.26004, 0.173603, -1.12344),glm::fvec3(2.1619, -0.0886756, -1.01584),glm::fvec3(2.10691, 0.112647, -0.0176185),glm::fvec3(2.03104, -0.438381, -0.872377),glm::fvec3(1.93289, -0.700659, -0.76478),glm::fvec3(1.94856, -0.136397, 0.624955),glm::fvec3(2.11214, 0.300734, 0.445626),},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, }),
        tinynurbs::RationalCurve<float>(2, {0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
            {glm::fvec3(2.78925, 0.103418, 0.213457),glm::fvec3(2.98301, 0.159616, -0.244035),glm::fvec3(2.93749, -1.32605, -0.445812),glm::fvec3(2.82124, -1.35977, -0.171317),glm::fvec3(2.77408, -0.391805, 0.146198),glm::fvec3(2.66623, -1.40473, 0.194676),glm::fvec3(2.54997, -1.43845, 0.469171),glm::fvec3(2.59549, 0.04722, 0.670949),glm::fvec3(2.78925, 0.103418, 0.213457),},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, }),
        tinynurbs::RationalCurve<float>(2, {0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
            {glm::fvec3(3.60077, -0.33267, 0.378142),glm::fvec3(4.00971, -0.335648, 0.0904634),glm::fvec3(3.91209, -1.82738, -0.0328582),glm::fvec3(3.66673, -1.82559, 0.139749),glm::fvec3(3.56823, -0.829914, 0.337035),glm::fvec3(3.33958, -1.82321, 0.369892),glm::fvec3(3.09421, -1.82142, 0.542499),glm::fvec3(3.19183, -0.329692, 0.66582),glm::fvec3(3.60077, -0.33267, 0.378142),},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, }),
        tinynurbs::RationalCurve<float>(2, {0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
            {glm::fvec3(5, -1.5, 1.5),glm::fvec3(5.49053, -1.43151, 1.43151),glm::fvec3(5.62048, -2.84555, 0.948186),glm::fvec3(5.32616, -2.88664, 0.989278),glm::fvec3(5.04332, -1.97135, 1.33889),glm::fvec3(4.93373, -2.94144, 1.04407),glm::fvec3(4.63942, -2.98253, 1.08516),glm::fvec3(4.50947, -1.56849, 1.56849),glm::fvec3(5, -1.5, 1.5),},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, }),
    };
    std::vector<float> v_bar = { 0, 0.116865, 0.206807, 0.311239, 0.412281, 0.487043, 0.570073, 0.630555, 0.704791, 0.8212, 1, };
    
    std::vector<std::vector<glm::vec3>> frames(v_bar.size());
    for (int i = 0; i < v_bar.size(); i++) {
        frames[i].resize(3);
        frames[i] = tinynurbs::curveTNBFrame<float>(trace, v_bar[i]);
    }

    

    // std::fill(frames.begin(), frames.end(), std::vector<glm::vec3>({glm::fvec3(1,0,0), glm::fvec3(0,1,0), glm::fvec3(0,0,1)}));
    tinynurbs::RationalSurface<float> sweep_surf(
        2, 2, 
        { 0, 0, 0, 0.15, 0.3, 0.4, 0.6, 0.7, 0.85, 1, 1, 1, },
        { 0, 0, 0, 0.161836, 0.259023, 0.36176, 0.449662, 0.528558, 0.600314, 0.667673, 0.762996, 1, 1, 1, },
        // row, col, data of array2
        { 9,11, 
        {
        glm::fvec3(2.28842e-08, -0.5, 0.5), 
        glm::fvec3(0.48417, -0.249791, 0.780435), 
        glm::fvec3(1.35815, 0.153899, 0.794649), 
        glm::fvec3(1.74586, 0.27785, 0.630892), 
        glm::fvec3(2.06772, 0.317353, 0.462628), 
        glm::fvec3(2.47702, 0.240809, 0.284369), 
        glm::fvec3(2.73502, 0.131627, 0.207552), 
        glm::fvec3(3.17556, -0.0852526, 0.204113), 
        glm::fvec3(3.67244, -0.366419, 0.393393), 
        glm::fvec3(4.52056, -1.00277, 0.993507), 
        glm::fvec3(5, -1.5, 1.5),
        glm::fvec3(2.58263e-08, -0.5, 1), 
        glm::fvec3(0.512206, -0.210369, 1.29785), 
        glm::fvec3(1.58335, 0.370408, 1.20973), 
        glm::fvec3(1.95331, 0.744145, 0.786392), 
        glm::fvec3(2.21764, 0.78156, 0.288975), 
        glm::fvec3(2.67786, 0.548481, -0.0795535), 
        glm::fvec3(2.90828, 0.191067, -0.269885), 
        glm::fvec3(3.45405, -0.166219, -0.213422), 
        glm::fvec3(4.11539, -0.348706, 0.133832), 
        glm::fvec3(5.00754, -0.965124, 0.880974), 
        glm::fvec3(5.49053, -1.43151, 1.43151),
        glm::fvec3(2.64208e-08, 1, 1), 
        glm::fvec3(0.563469, 1.3066, 1.19878), 
        glm::fvec3(1.60121, 1.74901, 0.490785), 
        glm::fvec3(1.82629, 1.29699, -0.730571), 
        glm::fvec3(2.21758, 0.236113, -1.17448), 		
        glm::fvec3(2.64893, -0.63112, -1.09388), 		
        glm::fvec3(2.87378, -1.32941, -0.478939), 		
        glm::fvec3(3.35298, -1.65212, 0.0142322), 		
        glm::fvec3(4.01114, -1.84473, -0.0781053), 		
        glm::fvec3(5.03973, -2.41323, 0.49843), 		
        glm::fvec3(5.62048, -2.84555, 0.948186),
        glm::fvec3(2.46555e-08, 1, 0.7), 		
        glm::fvec3(0.546648, 1.28295, 0.88833), 		
        glm::fvec3(1.46608, 1.6191, 0.241734), 		
        glm::fvec3(1.70182, 1.01722, -0.823871), 		
        glm::fvec3(2.12764, -0.0424113, -1.07029), 		
        glm::fvec3(2.52842, -0.815723, -0.875531), 		
        glm::fvec3(2.76982, -1.36507, -0.192476), 		
        glm::fvec3(3.18589, -1.60354, 0.264753), 		
        glm::fvec3(3.74537, -1.85536, 0.0776315), 		
        glm::fvec3(4.74755, -2.43582, 0.565949), 		
        glm::fvec3(5.32616, -2.88664, 0.989278),
        glm::fvec3(2.30823e-08, 9.84445e-09, 0.5), 		
        glm::fvec3(0.501258, 0.255866, 0.747411), 		
        glm::fvec3(1.3641, 0.613433, 0.555), 		
        glm::fvec3(1.70352, 0.462133, 0.125238), 		
        glm::fvec3(2.06771, 0.135537, -0.0251922), 		
        glm::fvec3(2.46737, -0.152392, -0.0537412), 		
        glm::fvec3(2.72352, -0.375199, 0.137867), 		
        glm::fvec3(3.14187, -0.580552, 0.279998), 		
        glm::fvec3(3.63769, -0.865095, 0.322747), 		
        glm::fvec3(4.5313, -1.48547, 0.865992), 		
        glm::fvec3(5.04332, -1.97135, 1.33889),
        glm::fvec3(2.23018e-08, 1, 0.3), 		
        glm::fvec3(0.524219, 1.25141, 0.474395), 		
        glm::fvec3(1.28592, 1.4459, -0.090334), 		
        glm::fvec3(1.53586, 0.64418, -0.948271), 		
        glm::fvec3(2.0077, -0.413777, -0.931371), 		
        glm::fvec3(2.36774, -1.06186, -0.584393), 		
        glm::fvec3(2.63122, -1.41263, 0.189473), 		
        glm::fvec3(2.96309, -1.53877, 0.598782), 		
        glm::fvec3(3.39101, -1.86953, 0.285281), 		
        glm::fvec3(4.35797, -2.46593, 0.655976), 		
        glm::fvec3(4.93373, -2.94144, 1.04407),
        glm::fvec3(2.05366e-08, 1, -3.24963e-09), 		
        glm::fvec3(0.507398, 1.22776, 0.163945), 		
        glm::fvec3(1.1508, 1.31599, -0.339385), 		
        glm::fvec3(1.41139, 0.364403, -1.04157), 		
        glm::fvec3(1.91776, -0.692301, -0.82718), 		
        glm::fvec3(2.24724, -1.24647, -0.366039), 		
        glm::fvec3(2.52726, -1.44829, 0.475936), 		
        glm::fvec3(2.796, -1.49019, 0.849303), 		
        glm::fvec3(3.12523, -1.88016, 0.441017), 		
        glm::fvec3(4.06578, -2.48852, 0.723495), 		
        glm::fvec3(4.63942, -2.98253, 1.08516),
        glm::fvec3(1.99421e-08, -0.5, 7.9355e-09), 		
        glm::fvec3(0.456135, -0.289213, 0.263017), 		
        glm::fvec3(1.13295, -0.0626108, 0.379564), 		
        glm::fvec3(1.53841, -0.188444, 0.475392), 		
        glm::fvec3(1.91781, -0.146854, 0.63628), 		
        glm::fvec3(2.27617, -0.0668641, 0.648292), 		
        glm::fvec3(2.56176, 0.0721867, 0.684989), 		
        glm::fvec3(2.89707, -0.00428574, 0.621649), 		
        glm::fvec3(3.22948, -0.384132, 0.652954), 		
        glm::fvec3(4.03359, -1.04041, 1.10604), 		
        glm::fvec3(4.50947, -1.56849, 1.56849),
        glm::fvec3(2.28842e-08, -0.5, 0.5), 		
        glm::fvec3(0.48417, -0.249791, 0.780435), 		
        glm::fvec3(1.35815, 0.153899, 0.794649), 		
        glm::fvec3(1.74586, 0.27785, 0.630892), 		
        glm::fvec3(2.06772, 0.317353, 0.462628), 		
        glm::fvec3(2.47702, 0.240809, 0.284369), 		
        glm::fvec3(2.73502, 0.131627, 0.207552), 		
        glm::fvec3(3.17556, -0.0852526, 0.204113), 		
        glm::fvec3(3.67244, -0.366419, 0.393393), 		
        glm::fvec3(4.52056, -1.00277, 0.993507), 		
        glm::fvec3(5, -1.5, 1.5),
        } 
        },
        { 9,11, 1 });
    program.init({ contour }, { trace }, { profile_curves }, { frames });
    program.setClearColor(0.05f, 0.18f, 0.25f, 1.0f);
    program.run({ contour }, { trace }, { profile_curves }, { frames }, {v_bar}, { sweep_surf });
    program.cleanup();

    return 0;
}